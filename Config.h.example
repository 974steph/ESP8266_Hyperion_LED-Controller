#ifndef Config_h
#define Config_h

#include "BaseHeader.h"

#include <EEPROM.h>

#include <FastLED.h>

#include <ESP8266WiFi.h>
#include <ESP8266mDNS.h>

//#define LOGLEVEL LOG_LEVEL_INFOS
#define LOGLEVEL LOG_LEVEL_DEBUG
//#define LOGLEVEL LOG_LEVEL_VERBOSE

#define CONFIG_START_ADDRESS 0
#define CONFIG_ACTIVE_VERSION 1

typedef struct {
  uint8_t a;
  uint8_t b;
  uint8_t c;
  uint8_t d;  
} ConfigIP;

typedef struct {
  char ssid[32];
  char spacer1[32];
  char password[64];
  char spacer2[64];
  
  ConfigIP ip;
  ConfigIP subnet;
  ConfigIP dns;
  char spacer3[16];
  
  char hostname[32];
  char spacer4[128];
} ConfigWifi;

typedef struct {
  uint8_t chipset;
  uint8_t colorOrder;
  uint8_t dataPin;
  uint8_t clockPin;
  uint16_t count;
  uint8_t idleMode;

  char spacer[32];
} ConfigLed;

typedef struct {
  uint16_t jsonServer;
  uint16_t udpLed;
  
  char spacer[32];
} ConfigPort;

typedef struct {
  uint8_t version;
  ConfigWifi wifi;
  ConfigLed led;
  ConfigPort ports;
} ConfigStruct;

enum Mode { RAINBOW, STATIC_COLOR, AMBILIGHT, OFF };

class Config {
  public:
    static constexpr char* ssid = "ssid";
    static constexpr char* password = "password";
    
    static constexpr char* host = "ESP8266";

    static const ESPIChipsets chipset = WS2801;
    //#define CHIPSET_CLOCKLESS_NAME WS2812B
    
    static const EOrder colorOrder = RGB;
    
    static const uint8_t dataPin  = D1;    // Data
    static const uint8_t clockPin = D2;    // optional for clockless LED Pixels, just set it to 0;
    static const uint8_t ledCount = 50;
    
    static const uint16_t udpLedPort = 19446;
    static const uint16_t jsonServerPort = 19444;

    static ConfigStruct getConfig();
    static void saveConfig(ConfigStruct cfg);
    
    Config();
  private:
    static ConfigStruct _cfgStruct;
    static boolean _cfgLoaded;
};

#endif